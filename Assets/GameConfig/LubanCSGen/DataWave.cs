
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class DataWave : Luban.BeanBase
{
    public DataWave(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { var __json0 = _buf["dependency_ids"]; if(!__json0.IsArray) { throw new SerializationException(); } DependencyIds = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  DependencyIds.Add(__v0); }   }
        { if(!_buf["time"].IsNumber) { throw new SerializationException(); }  Time = _buf["time"]; }
        { var __json0 = _buf["spawn_point"]; if(!__json0.IsArray) { throw new SerializationException(); } SpawnPoint = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  SpawnPoint.Add(__v0); }   }
        { if(!_buf["enemy_id"].IsNumber) { throw new SerializationException(); }  EnemyId = _buf["enemy_id"]; }
        { if(!_buf["enemy_count"].IsNumber) { throw new SerializationException(); }  EnemyCount = _buf["enemy_count"]; }
        { if(!_buf["interval_flag"].IsBoolean) { throw new SerializationException(); }  IntervalFlag = _buf["interval_flag"]; }
    }

    public static DataWave DeserializeDataWave(JSONNode _buf)
    {
        return new DataWave(_buf);
    }

    /// <summary>
    /// 波次id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 依赖波次id数组（0为无依赖）
    /// </summary>
    public readonly System.Collections.Generic.List<int> DependencyIds;
    /// <summary>
    /// 出怪时间（0为不依赖时间）
    /// </summary>
    public readonly int Time;
    /// <summary>
    /// 刷怪点
    /// </summary>
    public readonly System.Collections.Generic.List<int> SpawnPoint;
    /// <summary>
    /// 敌人id
    /// </summary>
    public readonly int EnemyId;
    /// <summary>
    /// 敌人数量
    /// </summary>
    public readonly int EnemyCount;
    /// <summary>
    /// 该波次结束后是否进入休整阶段
    /// </summary>
    public readonly bool IntervalFlag;
   
    public const int __ID__ = 1853781475;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "dependencyIds:" + Luban.StringUtil.CollectionToString(DependencyIds) + ","
        + "time:" + Time + ","
        + "spawnPoint:" + Luban.StringUtil.CollectionToString(SpawnPoint) + ","
        + "enemyId:" + EnemyId + ","
        + "enemyCount:" + EnemyCount + ","
        + "intervalFlag:" + IntervalFlag + ","
        + "}";
    }
}

}
