
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class DataDefender : Luban.BeanBase
{
    public DataDefender(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["name"].IsString) { throw new SerializationException(); }  Name = _buf["name"]; }
        { if(!_buf["desc"].IsString) { throw new SerializationException(); }  Desc = _buf["desc"]; }
        { if(!_buf["health_MAX"].IsNumber) { throw new SerializationException(); }  HealthMAX = _buf["health_MAX"]; }
        { if(!_buf["calc_health"].IsNumber) { throw new SerializationException(); }  CalcHealth = _buf["calc_health"]; }
        { if(!_buf["price"].IsNumber) { throw new SerializationException(); }  Price = _buf["price"]; }
        { if(!_buf["path_weight"].IsNumber) { throw new SerializationException(); }  PathWeight = _buf["path_weight"]; }
        { if(!_buf["attack_time"].IsNumber) { throw new SerializationException(); }  AttackTime = _buf["attack_time"]; }
        { if(!_buf["attack_damage"].IsNumber) { throw new SerializationException(); }  AttackDamage = _buf["attack_damage"]; }
        { if(!_buf["attack_damage_2"].IsNumber) { throw new SerializationException(); }  AttackDamage2 = _buf["attack_damage_2"]; }
        { if(!_buf["attack_range"].IsString) { throw new SerializationException(); }  AttackRange = _buf["attack_range"]; }
        { if(!_buf["move_range"].IsString) { throw new SerializationException(); }  MoveRange = _buf["move_range"]; }
        { if(!_buf["piece_type"].IsNumber) { throw new SerializationException(); }  PieceType = (piece.emPieceType)_buf["piece_type"].AsInt; }
        { if(!_buf["faction"].IsNumber) { throw new SerializationException(); }  Faction = (piece.emFaction)_buf["faction"].AsInt; }
        { if(!_buf["icon_file"].IsString) { throw new SerializationException(); }  IconFile = _buf["icon_file"]; }
    }

    public static DataDefender DeserializeDataDefender(JSONNode _buf)
    {
        return new DataDefender(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 名字
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 描述
    /// </summary>
    public readonly string Desc;
    /// <summary>
    /// 初始/最大生命值
    /// </summary>
    public readonly float HealthMAX;
    /// <summary>
    /// 合成生命值计算倍率
    /// </summary>
    public readonly float CalcHealth;
    /// <summary>
    /// 购买价格
    /// </summary>
    public readonly int Price;
    /// <summary>
    /// 寻路权重
    /// </summary>
    public readonly int PathWeight;
    /// <summary>
    /// 攻击速度
    /// </summary>
    public readonly float AttackTime;
    /// <summary>
    /// 基础伤害
    /// </summary>
    public readonly float AttackDamage;
    /// <summary>
    /// 扩散或其他伤害
    /// </summary>
    public readonly float AttackDamage2;
    /// <summary>
    /// 攻击范围
    /// </summary>
    public readonly string AttackRange;
    /// <summary>
    /// 移动范围
    /// </summary>
    public readonly string MoveRange;
    /// <summary>
    /// 棋子类型
    /// </summary>
    public readonly piece.emPieceType PieceType;
    /// <summary>
    /// 棋子阵营
    /// </summary>
    public readonly piece.emFaction Faction;
    public readonly string IconFile;
   
    public const int __ID__ = 2139316173;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "desc:" + Desc + ","
        + "healthMAX:" + HealthMAX + ","
        + "calcHealth:" + CalcHealth + ","
        + "price:" + Price + ","
        + "pathWeight:" + PathWeight + ","
        + "attackTime:" + AttackTime + ","
        + "attackDamage:" + AttackDamage + ","
        + "attackDamage2:" + AttackDamage2 + ","
        + "attackRange:" + AttackRange + ","
        + "moveRange:" + MoveRange + ","
        + "pieceType:" + PieceType + ","
        + "faction:" + Faction + ","
        + "iconFile:" + IconFile + ","
        + "}";
    }
}

}
