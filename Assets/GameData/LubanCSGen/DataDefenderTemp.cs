
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class DataDefenderTemp : Luban.BeanBase
{
    public DataDefenderTemp(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["name"].IsString) { throw new SerializationException(); }  Name = _buf["name"]; }
        { if(!_buf["desc"].IsString) { throw new SerializationException(); }  Desc = _buf["desc"]; }
        { if(!_buf["stage"].IsNumber) { throw new SerializationException(); }  Stage = _buf["stage"]; }
        { if(!_buf["move_range"].IsString) { throw new SerializationException(); }  MoveRange = _buf["move_range"]; }
        { if(!_buf["HP_A"].IsNumber) { throw new SerializationException(); }  HPA = _buf["HP_A"]; }
        { if(!_buf["HP_P"].IsNumber) { throw new SerializationException(); }  HPP = _buf["HP_P"]; }
        { if(!_buf["price"].IsNumber) { throw new SerializationException(); }  Price = _buf["price"]; }
        { if(!_buf["path_weight"].IsNumber) { throw new SerializationException(); }  PathWeight = _buf["path_weight"]; }
        { if(!_buf["MP_A"].IsNumber) { throw new SerializationException(); }  MPA = _buf["MP_A"]; }
        { if(!_buf["MP_ATKR"].IsNumber) { throw new SerializationException(); }  MPATKR = _buf["MP_ATKR"]; }
        { if(!_buf["MP_TR"].IsNumber) { throw new SerializationException(); }  MPTR = _buf["MP_TR"]; }
        { if(!_buf["ATK_A"].IsNumber) { throw new SerializationException(); }  ATKA = _buf["ATK_A"]; }
        { if(!_buf["ATK_P"].IsNumber) { throw new SerializationException(); }  ATKP = _buf["ATK_P"]; }
        { if(!_buf["AP_A"].IsNumber) { throw new SerializationException(); }  APA = _buf["AP_A"]; }
        { if(!_buf["AP_P"].IsNumber) { throw new SerializationException(); }  APP = _buf["AP_P"]; }
        { if(!_buf["AS_A"].IsNumber) { throw new SerializationException(); }  ASA = _buf["AS_A"]; }
        { if(!_buf["AS_W"].IsNumber) { throw new SerializationException(); }  ASW = _buf["AS_W"]; }
        { if(!_buf["AS_P"].IsNumber) { throw new SerializationException(); }  ASP = _buf["AS_P"]; }
        { if(!_buf["AR_A"].IsNumber) { throw new SerializationException(); }  ARA = _buf["AR_A"]; }
        { if(!_buf["AR_P"].IsNumber) { throw new SerializationException(); }  ARP = _buf["AR_P"]; }
        { if(!_buf["SR_A"].IsNumber) { throw new SerializationException(); }  SRA = _buf["SR_A"]; }
        { if(!_buf["SR_P"].IsNumber) { throw new SerializationException(); }  SRP = _buf["SR_P"]; }
        { if(!_buf["ATKR_A"].IsNumber) { throw new SerializationException(); }  ATKRA = _buf["ATKR_A"]; }
        { if(!_buf["faction"].IsNumber) { throw new SerializationException(); }  Faction = (piece.emFaction)_buf["faction"].AsInt; }
        { if(!_buf["icon_file"].IsString) { throw new SerializationException(); }  IconFile = _buf["icon_file"]; }
        { if(!_buf["attack_range"].IsString) { throw new SerializationException(); }  AttackRange = _buf["attack_range"]; }
    }

    public static DataDefenderTemp DeserializeDataDefenderTemp(JSONNode _buf)
    {
        return new DataDefenderTemp(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 名字
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 描述
    /// </summary>
    public readonly string Desc;
    public readonly int Stage;
    /// <summary>
    /// 移动范围
    /// </summary>
    public readonly string MoveRange;
    /// <summary>
    /// 基础生命值
    /// </summary>
    public readonly float HPA;
    /// <summary>
    /// 生命值百分比
    /// </summary>
    public readonly float HPP;
    /// <summary>
    /// 购买价格
    /// </summary>
    public readonly int Price;
    /// <summary>
    /// 寻路权重
    /// </summary>
    public readonly int PathWeight;
    /// <summary>
    /// 基础法力值
    /// </summary>
    public readonly int MPA;
    /// <summary>
    /// 每次攻击回发力值
    /// </summary>
    public readonly float MPATKR;
    /// <summary>
    /// 固定时间回法力值
    /// </summary>
    public readonly float MPTR;
    /// <summary>
    /// 基础攻击力
    /// </summary>
    public readonly float ATKA;
    /// <summary>
    /// 攻击力百分比
    /// </summary>
    public readonly float ATKP;
    /// <summary>
    /// 基础法强
    /// </summary>
    public readonly float APA;
    /// <summary>
    /// 法强百分比
    /// </summary>
    public readonly float APP;
    /// <summary>
    /// 基础攻速
    /// </summary>
    public readonly float ASA;
    /// <summary>
    /// 攻速权重
    /// </summary>
    public readonly float ASW;
    /// <summary>
    /// 攻速百分比
    /// </summary>
    public readonly float ASP;
    /// <summary>
    /// 基础物抗
    /// </summary>
    public readonly float ARA;
    /// <summary>
    /// 物抗百分比
    /// </summary>
    public readonly float ARP;
    /// <summary>
    /// 基础魔抗
    /// </summary>
    public readonly float SRA;
    /// <summary>
    /// 魔抗百分比
    /// </summary>
    public readonly float SRP;
    /// <summary>
    /// 基础攻击范围
    /// </summary>
    public readonly float ATKRA;
    /// <summary>
    /// 棋子阵营
    /// </summary>
    public readonly piece.emFaction Faction;
    public readonly string IconFile;
    /// <summary>
    /// 攻击范围
    /// </summary>
    public readonly string AttackRange;
   
    public const int __ID__ = 1277978945;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "desc:" + Desc + ","
        + "stage:" + Stage + ","
        + "moveRange:" + MoveRange + ","
        + "HPA:" + HPA + ","
        + "HPP:" + HPP + ","
        + "price:" + Price + ","
        + "pathWeight:" + PathWeight + ","
        + "MPA:" + MPA + ","
        + "MPATKR:" + MPATKR + ","
        + "MPTR:" + MPTR + ","
        + "ATKA:" + ATKA + ","
        + "ATKP:" + ATKP + ","
        + "APA:" + APA + ","
        + "APP:" + APP + ","
        + "ASA:" + ASA + ","
        + "ASW:" + ASW + ","
        + "ASP:" + ASP + ","
        + "ARA:" + ARA + ","
        + "ARP:" + ARP + ","
        + "SRA:" + SRA + ","
        + "SRP:" + SRP + ","
        + "ATKRA:" + ATKRA + ","
        + "faction:" + Faction + ","
        + "iconFile:" + IconFile + ","
        + "attackRange:" + AttackRange + ","
        + "}";
    }
}

}
